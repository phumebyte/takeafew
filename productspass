document.addEventListener('DOMContentLoaded', () => {
  getProducts()
  displayWishlist(wishlist)
})

let wishlist = []
let cart = []
let products = []


// FETCHING FROM API
async function getProducts(){
  try {
    const serverData = await fetch('https://dummyjson.com/products')
    const data = await serverData.json()
    products = data.products

    displayProducts(products)
  } catch (error) {
    console.log(error)
  }
}

function displayWishlist() {
  console.log("Displaying wishlist", wishlist); // Debug log
  const wishlistContainer = document.getElementById('wishlist-products');
  if (!wishlistContainer) {
    console.error("Wishlist container not found!");
    return;
  }
 
  wishlistContainer.innerHTML = '';
 
  if (wishlist.length === 0) {
    wishlistContainer.innerHTML = '<p style="text-align: center; margin-top: 50px;">Your wishlist is empty</p>';
    return;
  }
 
  wishlist.forEach(item => {
    const wishlistItem = document.createElement('div');
    wishlistItem.className = 'a-product-from-wishlist';
    wishlistItem.style.cssText = 'width: 100%; height: 100px; margin-top: 20px; display: flex; align-items: center;';
    
    wishlistItem.innerHTML = `
      <div class="wishlist-item-actions" style="width: 100px; text-align: center;">
        <i class="bi bi-trash wishlist-remove" data-id="${item.id}" style="cursor: pointer;"></i>
      </div>
      <div class="product-name-wishlist" style="display: flex; align-items: center; width: 400px;">
        <div class="product-wishlist-image" style="
          background: url('${item.thumbnail}');
          background-position: center;
          background-repeat: no-repeat;
          background-size: cover;
          height: 70px;
          width: 70px;
          margin-right: 20px;">
        </div>
        <p style="font-weight: bold;">${item.title}</p>
      </div>
      <div class="wishlist-unit-price" style="width: 400px; text-align: center;">
        <p>R ${item.price.toFixed(2)}</p>
      </div>
      <div class="wishlist-stock-status" style="width: 400px; text-align: center;">
        <p>${item.stock > 0 ? 'In Stock' : 'Out of Stock'}</p>
      </div>
      <div class="wishlist-add-to-cart" style="width: 100px; text-align: center;">
        <i class="bi bi-cart3 wishlist-add-cart" data-id="${item.id}" style="cursor: pointer;"></i>
      </div>
    `;
 
    wishlistContainer.appendChild(wishlistItem);
  });
 
  // Fixed typo here (was .wishlist-remove)
  document.querySelectorAll('.wishlist-remove').forEach(button => {
    button.addEventListener('click', (e) => {
      const productId = parseInt(e.target.dataset.id);
      removeFromWishlist(productId);
    });
  });
 
  document.querySelectorAll('.wishlist-add-cart').forEach(button => {
    button.addEventListener('click', (e) => {
      const productId = parseInt(e.target.dataset.id);
      addToCartFromWishlist(productId);
    });
  });
}
 
// Function to remove item from wishlist
function removeFromWishlist(productId) {
  wishlist = wishlist.filter(item => item.id !== productId);
  displayWishlist();
}
 
function addToWishlist(productId) {
  const product = products.find(p => p.id === productId);
  if (!product) return false;
 
  // Check if already in wishlist
  const existingItem = wishlist.find(item => item.id === productId);
  if (!existingItem) {
    wishlist.push({...product});
    return true;
  }
  return false;
}
 
// Add to cart function
function addToCart(productId) {
  const product = products.find(p => p.id === productId);
  if (!product) return false;
 
  const existingItem = cart.find(item => item.id === productId);
  if (existingItem) {
    existingItem.quantity += 1;
  } else {
    cart.push({
      ...product,
      quantity: 1
    });
   
  }
 
  updateCartCount();
  renderCheckoutDialog();
  return true;
}
 
// Update cart count display
function updateCartCount() {
  const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
  const cartCounterDisplay = document.getElementById('numberCount');
  
  if (cartCounterDisplay) {
      cartCounterDisplay.textContent = totalItems;
      
      // Optional: Add/remove a class when cart is empty
      if (totalItems === 0) {
          cartCounterDisplay.classList.add('empty');
      } else {
          cartCounterDisplay.classList.remove('empty');
      }
  }
}
 
function updateQuantity(productId, change) {
  const item = cart.find(item => item.id === productId);
  if (!item) return;
  
  item.quantity += change;
  
  if (item.quantity <= 0) {
      cart = cart.filter(item => item.id !== productId);
  }
  
  updateCartCount();
  renderCheckoutDialog();
}
 
// Render checkout items
function renderCheckoutDialog() {
  const checkoutContainer = document.querySelector('.checkout-products');
  if (!checkoutContainer) return;
 
  checkoutContainer.innerHTML = '';
 
  if (cart.length === 0) {
    checkoutContainer.innerHTML = '<p style="text-align: center; margin-top: 50px;">Your cart is empty</p>';
    document.querySelector('.priceTotal').textContent = `R 0`;
    return;
  }
 
  let total = 0;
 
  cart.forEach(product => {
    const itemTotal = product.price * product.quantity;
    total += itemTotal;
 
    const productHTML = `
      <div class="a-product" style="display: flex;">
        <div class="left-product" style="margin-top: 20px; height: 180px;">
          <div class="image-checkout" style="
            width: 160px;
            height: 180px;
            background: url('${product.thumbnail}');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;">
          </div>
        </div>
 
        <div class="right-product" style="margin-top: 0px; padding: 30px;">
          <p>${product.title}</p>
          <div class="counterProduct" style="display: flex; padding-top: 30px;">
            <div class="decrementButton" onclick="updateQuantity(${product.id}, -1)" style="border-radius: 100%; cursor: pointer; border: solid 1px black; padding: 10px; width: 40px; height: 40px;">
              <p style="margin-left: 5px">-</p>
            </div>
            <div class="crementedAmount" style="margin-left: 10px; padding: 10px; margin-right: 10px;">${product.quantity}</div>
            <div class="incrementButton" onclick="updateQuantity(${product.id}, 1)" style="border-radius: 50%; cursor: pointer; border: solid 1px black; padding: 10px; width: 40px; height: 40px;">
              <p style="margin-left: 5px">+</p>
            </div>
          </div>
          <div style="display: flex; margin-top: 20px;">
            <p>R ${itemTotal.toFixed(2)}</p>
          </div>
        </div>
      </div>
    `;
 
    checkoutContainer.innerHTML += productHTML;
  });
 
   // Update totals
   document.querySelector('.priceTotal').textContent = `R ${total.toFixed(2)}`;
 
   
}
 
// Initialize cart on page load
document.addEventListener('DOMContentLoaded', () => {
  updateCartCount();
  
  // Add event listener to your cart button (make sure you have one in your HTML)
  const cartButton = document.getElementById('addbutton');
  if (cartButton) {
      cartButton.addEventListener('click', showCheckoutDialog);
  }
});
 
// Modal close button
const closeProductDialog = document.getElementById('close-view-modal');
if (closeProductDialog) {
  closeProductDialog.addEventListener('click', () => {
    const viewProductDialog = document.getElementById('view-product-dialog');
    if (viewProductDialog) viewProductDialog.close();
  });
}

// Wishlist Functions
function toggleWishlist(productId, button) {
  const product = products.find(p => p.id === productId);
  if (!product) return;
 
  const heartIcon = button.querySelector('i');
  const isInWishlist = wishlist.some(item => item.id === productId);
 
  if (isInWishlist) {
    // Remove from wishlist
    wishlist = wishlist.filter(item => item.id !== productId);
    heartIcon.classList.remove('bi-heart-fill');
    heartIcon.classList.add('bi-heart');
  } else {
    // Add to wishlist using the addToWishlist function
    addToWishlist(productId);
    heartIcon.classList.remove('bi-heart');
    heartIcon.classList.add('bi-heart-fill');
  }
 
  displayWishlist();
}
 
// Dummy test function for export from old takeafew
function deleteFromCart() {}
function updateName() {}
function totalPrice() {}
function reviewAccount() {}
function discountAmount() {}
function warranty() {}
function fiveStarRating() {}
function dimensionsCalculation() {}
 
window.updateQuantity = updateQuantity;
window.addToCart = addToCart;
window.addToWishlist = addToWishlist;
 
export {
  toggleWishlist,
  getProducts,
  addToCart,
  deleteFromCart,
  updateName,
  totalPrice,
  reviewAccount,
  discountAmount,
  warranty,
  fiveStarRating,
  dimensionsCalculation
};